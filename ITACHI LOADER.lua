server = "http://itachip1.pythonanywhere.com/"
tg = "https://t.me/ItachiModzz"

c = gg.makeRequest(server.."/mykey").content

ch = gg.prompt(
	{'Enter your key and pres ok to continue'},
	{[1] = c},
	{[1] = 'text'})

if ch == nill then
 gg.alert("Please enter key and press ok")
   os.exit()
end

pass = ch[1]

str = pass
if string.find(str, "/") then
  gg.alert("Invlied Key")
  os.exit()
end

if pass == "" then
      x = gg.alert("Wrong key\n Get key form here \n\n"..tg,"copy link")
   if x == 1 then 
      gg.copyText(server)
   end
   os.exit()
end

a = gg.makeRequest(server.."/login/"..pass.."").content

if a == "true" then
   gg.alert("Login Success")
elseif a =="false" then
   x = gg.alert("Wrong key\n Get key form here \n\n "..server,"copy link")
   if x == 1 then 
      gg.copyText(server)
   end
   os.exit()
else
  gg.alert("No response form server/No internet Connection")
  os.exit()
end

function setValues(address, flags, value) gg.setValues({[1] = {address = address, flags = flags, value = value}}) end
local running = true
function setvalue(address,flags,value)
local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end
function split(szFullString, szSeparator)
    local nSplitArray = {}
    local nFindStartIndex = 1
    local nSplitIndex = 1
    
    while true do
        local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
        
        if not nFindLastIndex then
            nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
            break
        end
        
        nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
        nFindStartIndex = nFindLastIndex + string.len(szSeparator)
        nSplitIndex = nSplitIndex + 1
    end
    
    return nSplitArray
end
function xgxc(szpy, qmxg)
    for x = 1, #qmxg do
        local xgpy = szpy + qmxg[x]["offset"]
        local xglx = qmxg[x]["type"]
        local xgsz = qmxg[x]["value"]
        local xgdj = qmxg[x]["freeze"]
        
        if xgdj == nil or xgdj == "" then
            gg.setValues({[1] = {address = xgpy, flags = xglx, value = xgsz}})
        else
            gg.addListItems({[1] = {address = xgpy, flags = xglx, freeze = xgdj, value = xgsz}})
        end
    end
end
function xqmnb(qmnb)
gg.clearResults()
    gg.clearResults()
    gg.setRanges(qmnb[1]["memory"])
    gg.searchNumber(qmnb[3]["value"], qmnb[3]["type"])
    
    if gg.getResultCount() > 0 then
        gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
        gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
        gg.refineNumber(qmnb[3]["value"], qmnb[3]["type"])
        
        local sl = gg.getResults(999999)
        local sz = gg.getResultCount()
        
        if sz > 999999 then
            sz = 999999
        end
        
        for i = 1, sz do
            local pdjg = true
            for v = 4, #qmnb do
                local pysz = {}
                pysz[1] = {}
                pysz[1].address = sl[i].address + qmnb[v]["offset"]
                pysz[1].flags = qmnb[v]["type"]
                local szpy = gg.getValues(pysz)
                local pdpd = qmnb[v]["lv"] .. ";" .. szpy[1].value
                local szpd = split(pdpd, ";")
                local tzszpd = szpd[1]
                local pyszpd = szpd[2]
                
                if tzszpd ~= pyszpd then
                    pdjg = false
                    break
                end
            end
            
            if pdjg then
                xgxc(sl[i].address, qmxg)
            end
        end
    end
end
function SearchWrite(Search, Write, Type)
    gg.clearResults()
    gg.setVisible(false)
    gg.searchNumber(Search[1][1], Type)
    
    local count = gg.getResultCount()
    local result = gg.getResults(count)
    gg.clearResults()
    
    local data = {}
    local base = Search[1][2]
    
    if count > 0 then
        for k = 2, #Search do
            local tmp = {}
            local offset = Search[k][2] - base
            local num = Search[k][1]
            
            for i, v in ipairs(result) do
                tmp[#tmp+1] = {}
                tmp[#tmp].address = v.address + offset
                tmp[#tmp].flags = v.flags
            end
            
            tmp = gg.getValues(tmp)
            
            for i, v in ipairs(tmp) do
                if tostring(v.value) ~= tostring(num) then
                    result[i].isUseful = false
                end
            end
        end
        
        for i, v in ipairs(result) do
            if v.isUseful then
                data[#data+1] = v.address
            end
        end
        
        if #data > 0 then
            local t = {}
            local base = Search[1][2]
            
            for i = 1, #data do
                for k, w in ipairs(Write) do
                    local offset = w[2] - base
                    t[#t+1] = {}
                    t[#t].address = data[i] + offset
                    t[#t].flags = Type
                    t[#t].value = w[1]
                    
                    if w[3] == true then
                        local item = {}
                        item[#item+1] = t[#t]
                        item[#item].freeze = true
                        gg.addListItems(item)
                    end
                end
            end
            
            gg.setValues(t)
            gg.addListItems(t)
            return true
        else
            return false
        end
    else
        return false
    end
end

function A1()
local so = gg.getRangesList('libanogs.so')[1].start
local offsets = {
0x20b8,
0x20b9,
0x20ba,
0x20bb,
0x20bc,
0x20bd,
0x20be,
0x20bf,
0x20c0,
0x20c1,
0x20c2,
0x20c3,
0x20c4,
0x20c5,
0x20c6,
0x20c7,
0x20c8,
0x20c9,
0x20ca,
0x20cb,
0x20cc,
0x20cd,
0x20ce,
0x20cf,
0x20d0,
0x20d1,
0x20d2,
0x20d3,
0x20d4,
0x20d5,
0x20d6,
0x20d7,
0x20d8,
0x20d9,
0x20da,
0x20db,
0x20dc,
0x20dd,
0x20de,
0x20df,
0x20e0,
0x20e1,
0x20e2,
0x20e3,
0x20e4,
0x20e5,
0x20e6,
0x20e7,
0x20e8,
0x20e9,
0x20ea,
0x20eb,
0x20ec,
0x20ed,
0x20ee,
0x20ef,
0x20f0,
0x20f1,
0x20f2,
0x20f3,
0x20f4,
0x20f5,
0x20f6,
0x20f7,
0x20f8,
0x20f9,
0x20fa,
0x20fb,
0x20fc,
0x20fd,
0x20fe,
0x20ff,
0x2100,
0x2101,
0x2102,
0x2103,
0x2104,
0x2105,
0x2106,
0x2107,
0x2108,
0x2109,
0x210a,
0x210b,
0x210c,
0x210d,
0x210e,
0x210f,
0x2110,
0x2111,
0x2112,
0x2113,
0x2114,
0x2115,
0x2116,
0x2117,
0x2118,
0x2119,
0x211a,
0x211b,
0x211c,
0x211d,
0x211e,
0x211f,
0x2120,
0x2121,
0x2122,
0x2123,
0x2124,
0x2125,
0x2126,
0x2127,
0x2128,
0x2129,
0x212a,
0x212b,
0x212c,
0x212d,
0x212e,
0x212f,
0x2130,
0x2131,
0x2132,
0x2133,
0x2134,
0x2135,
0x2136,
0x2137,
0x2138,
0x2139,
0x213a,
0x213b,
0x213c,
0x213d,
0x213e,
0x213f,
0x2140,
0x2141,
0x2142,
0x2143,
0x2144,
0x2145,
0x2146,
0x2147,
0x2148,
0x2149,
0x214a,
0x214b,
0x214c,
0x214d,
0x214e,
0x214f,
0x2150,
0x2151,
0x2152,
0x2153,
0x2154,
0x2155,
0x2156,
0x2157,
0x2158,
0x2159,
0x215a,
0x215b,
0x215c,
0x215d,
0x215e,
0x215f,
0x2160,
0x2161,
0x2162,
0x2163,
0x2164,
0x2165,
0x2166,
0x2167,
0x2168,
0x2169,
0x216a,
0x216b,
0x216c,
0x216d,
0x216e,
0x216f,
0x2170,
0x2171,
0x2172,
0x2173,
0x2174,
0x2175,
0x2176,
0x2177,
0x2178,
0x2179,
0x217a,
0x217b,
0x217c,
0x217d,
0x217e,
0x217f,
0x2180,
0x2181,
0x2182,
0x2183,
0x2184,
0x2185,
0x2186,
0x2187,
0x2188,
0x2189,
0x218a,
0x218b,
0x218c,
0x218d,
0x218e,
0x218f,
0x2190,
0x2191,
0x2192,
0x2193,
0x2194,
0x2195,
0x2196,
0x2197,
0x2198,
0x2199,
0x219a,
0x219b,
0x219c,
0x219d,
0x219e,
0x219f,
0x21a0,
0x21a1,
0x21a2,
0x21a3,
0x21a4,
0x21a5,
0x21a6,
0x21a7,
0x21a8,
0x21a9,
0x21aa,
0x21ab,
0x21ac,
0x21ad,
0x21ae,
0x21af,
0x21b0,
0x21b1,
0x21b2,
0x21b3,
0x21b4,
0x21b5,
0x21b6,
0x21b7,
0x21b8,
0x21b9,
0x21ba,
0x21bb,
0x21bc,
0x21bd,
0x21be,
0x21bf,
0x21c0,
0x21c1,
0x21c2,
0x21c3,
0x21c4,
0x21c5,
0x21c6,
0x21c7,
0x21c8,
0x21c9,
0x21ca,
0x21cb,
0x21cc,
0x21cd,
0x21ce,
0x21cf,
0x21d0,
0x21d1,
0x21d2,
0x21d3,
0x21d4,
0x21d5,
0x21d6,
0x21d7,
0x21d8,
0x21d9,
0x21da,
0x21db,
0x21dc,
0x21dd,
0x21de,
0x21df,
0x21e0,
0x21e1,
0x21e2,
0x21e3,
0x21e4,
0x21e5,
0x21e6,
0x21e7,
0x21e8,
0x21e9,
0x21ea,
0x21eb,
0x21ec,
0x21ed,
0x21ee,
0x21ef,
0x21f0,
0x21f1,
0x21f2,
0x21f3,
0x21f4,
0x21f5,
0x21f6,
0x21f7,
0x21f8,
0x21f9,
0x21fa,
0x21fb,
0x21fc,
0x21fd,
0x21fe,
0x21ff,
0x2200,
0x2201,
0x2202,
0x2203,
0x2204,
0x2205,
0x2206,
0x2207,
0x2208,
0x2209,
0x220a,
0x220b,
0x220c,
0x220d,
0x220e,
0x220f,
0x2210,
0x2211,
0x2212,
0x2213,
0x2214,
0x2215,
0x2216,
0x2217,
0x2218,
0x2219,
0x221a,
0x221b,
0x221c,
0x221d,
0x221e,
0x221f,
0x2220,
0x2221,
0x2222,
0x2223,
0x2224,
0x2225,
0x2226,
0x2227,
0x2228,
0x2229,
0x222a,
0x222b,
0x222c,
0x222d,
0x222e,
0x222f,
0x2230,
0x2231,
0x2232,
0x2233,
0x2234,
0x2235,
0x2236,
0x2237,
0x2238,
0x2239,
0x223a,
0x223b,
0x223c,
0x223d,
0x223e,
0x223f,
0x2240,
0x2241,
0x2242,
0x2243,
0x2244,
0x2245,
0x2246,
0x2247,
0x2248,
0x2249,
0x224a,
0x224b,
0x224c,
0x224d,
0x224e,
0x224f,
0x2250,
0x2251,
0x2252,
0x2253,
0x2254,
0x2255,
0x2256,
0x2257,
0x2258,
0x2259,
0x225a,
0x225b,
0x225c,
0x225d,
0x225e,
0x225f,
0x2260,
0x2261,
0x2262,
0x2263,
0x2264,
0x2265,
0x2266,
0x2267,
0x2268,
0x2269,
0x226a,
0x226b,
0x226c,
0x226d,
0x226e,
0x226f,
0x2270,
0x2271,
0x2272,
0x2273,
0x2274,
0x2275,
0x2276,
0x2277,
0x2278,
0x2279,
0x227a,
0x227b,
0x227c,
0x227d,
0x227e,
0x227f,
0x2280,
0x2281,
0x2282,
0x2283,
0x2284,
0x2285,
0x2286,
0x2287,
0x2288,
0x2289,
0x228a,
0x228b,
0x228c,
0x228d,
0x228e,
0x228f,
0x2290,
0x2291,
0x2292,
0x2293,
0x2294,
0x2295,
0x2296,
0x2297,
0x2298,
0x2299,
0x229a,
0x229b,
0x229c,
0x229d,
0x229e,
0x229f,
0x22a0,
0x22a1,
0x22a2,
0x22a3,
0x22a4,
0x22a5,
0x22a6,
0x22a7,
0x22a8,
0x22a9,
0x22aa,
0x22ab,
0x22ac,
0x22ad,
0x22ae,
0x22af,
0x22b0,
0x22b1,
0x22b2,
0x22b3,
0x22b4,
0x22b5,
0x22b6,
0x22b7,
0x22b8,
0x22b9,
0x22ba,
0x22bb,
0x22bc,
0x22bd,
0x22be,
0x22bf,
0x22c0,
0x22c1,
0x22c2,
0x22c3,
0x22c4,
0x22c5,
0x22c6,
0x22c7,
0x22c8,
0x22c9,
0x22ca,
0x22cb,
0x22cc,
0x22cd,
0x22ce,
0x22cf,
0x22d0,
0x22d1,
0x22d2,
0x22d3,
0x22d4,
0x22d5,
0x22d6,
0x22d7,
0x22d8,
0x22d9,
0x22da,
0x22db,
0x22dc,
0x22dd,
0x22de,
0x22df,
0x22e0,
0x22e1,
0x22e2,
0x22e3,
0x22e4,
0x22e5,
0x22e6,
0x22e7,
0x22e8,
0x22e9,
0x22ea,
0x22eb,
0x22ec,
0x22ed,
0x22ee,
0x22ef,
0x22f0,
0x22f1,
0x22f2,
0x22f3,
0x22f4,
0x22f5,
0x22f6,
0x22f7,
0x22f8,
0x22f9,
0x22fa,
0x22fb,
0x22fc,
0x22fd,
0x22fe,
0x22ff,
0x2300,
0x2301,
0x2302,
0x2303,
0x2304,
0x2305,
0x2306,
0x2307,
0x2308,
0x2309,
0x230a,
0x230b,
0x230c,
0x230d,
0x230e,
0x230f,
0x2310,
0x2311,
0x2312,
0x2313,
0x2314,
0x2315,
0x2316,
0x2317,
0x2318,
0x2319,
0x231a,
0x231b,
0x231c,
0x231d,
0x231e,
0x231f,
0x2320,
0x2321,
0x2322,
0x2323,
0x2324,
0x2325,
0x2326,
0x2327,
0x2328,
0x2329,
0x232a,
0x232b,
0x232c,
0x232d,
0x232e,
0x232f,
0x2330,
0x2331,
0x2332,
0x2333,
0x2334,
0x2335,
0x2336,
0x2337,
0x2338,
0x2339,
0x233a,
0x233b,
0x233c,
0x233d,
0x233e,
0x233f,
0x2340,
0x2341,
0x2342,
0x2343,
0x2344,
0x2345,
0x2346,
0x2347,
0x2348,
0x2349,
0x234a,
0x234b,
0x234c,
0x234d,
0x234e,
0x234f,
0x2350,
0x2351,
0x2352,
0x2353,
0x2354,
0x2355,
0x2356,
0x2357,
0x2358,
0x2359,
0x235a,
0x235b,
0x235c,
0x235d,
0x235e,
0x235f,
0x2360,
0x2361,
0x2362,
0x2363,
0x2364,
0x2365,
0x2366,
0x2367,
0x2368,
0x2369,
0x236a,
0x236b,
0x236c,
0x236d,
0x236e,
0x236f,
0x2370,
0x2371,
0x2372,
0x2373,
0x2374,
0x2375,
0x2376,
0x2377,
0x2378,
0x2379,
0x237a,
0x237b,
0x237c,
0x237d,
0x237e,
0x237f,
0x2380,
0x2381,
0x2382,
0x2383,
0x2384,
0x2385,
0x2386,
0x2387,
0x2388,
0x2389,
0x238a,
0x238b,
0x238c,
0x238d,
0x238e,
0x238f,
0x2390,
0x2391,
0x2392,
0x2393,
0x2394,
0x2395,
0x2396,
0x2397,
0x2398,
0x2399,
0x239a,
0x239b,
0x239c,
0x239d,
0x239e,
0x239f,
0x23a0,
0x23a1,
0x23a2,
0x23a3,
0x23a4,
0x23a5,
0x23a6,
0x23a7,
0x23a8,
0x23a9,
0x23aa,
0x23ab,
0x23ac,
0x23ad,
0x23ae,
0x23af,
0x23b0,
0x23b1,
0x23b2,
0x23b3,
0x23b4,
0x23b5,
0x23b6,
0x23b7,
0x23b8,
0x23b9,
0x23ba,
0x23bb,
0x23bc,
0x23bd,
0x23be,
0x23bf,
0x23c0,
0x23c1,
0x23c2,
0x23c3,
0x23c4,
0x23c5,
0x23c6,
0x23c7,
0x23c8,
0x23c9,
0x23ca,
0x23cb,
0x23cc,
0x23cd,
0x23ce,
0x23cf,
0x23d0,
0x23d1,
0x23d2,
0x23d3,
0x23d4,
0x23d5,
0x23d6,
0x23d7,
0x23d8,
0x23d9,
0x23da,
0x23db,
0x23dc,
0x23dd,
0x23de,
0x23df,
0x23e0,
0x23e1,
0x23e2,
0x23e3,
0x23e4,
0x23e5,
0x23e6,
0x23e7,
0x23e8,
0x23e9,
0x23ea,
0x23eb,
0x23ec,
0x23ed,
0x23ee,
0x23ef,
0x23f0,
0x23f1,
0x23f2,
0x23f3,
0x23f4,
0x23f5,
0x23f6,
0x23f7,
0x23f8,
0x23f9,
0x23fa,
0x23fb,
0x23fc,
0x23fd,
0x23fe,
0x23ff,
0x2400,
0x2401,
0x2402,
0x2403,
0x2404,
0x2405,
0x2406,
0x2407,
0x2408,
0x2409,
0x240a,
0x240b,
0x240c,
0x240d,
0x240e,
0x240f,
0x2410,
0x2411,
0x2412,
0x2413,
0x2414,
0x2415,
0x2416,
0x2417,
0x2418,
0x2419,
0x241a,
0x241b,
0x241c,
0x241d,
0x241e,
0x241f,
0x2420,
0x2421,
0x2422,
0x2423,
0x2424,
0x2425,
0x2426,
0x2427,
0x2428,
0x2429,
0x242a,
0x242b,
0x242c,
0x242d,
0x242e,
0x242f,
0x2430,
0x2431,
0x2432,
0x2433,
0x2434,
0x2435,
0x2436,
0x2437,
0x2438,
0x2439,
0x243a,
0x243b,
0x243c,
0x243d,
0x243e,
0x243f,
0x2440,
0x2441,
0x2442,
0x2443,
0x2444,
0x2445,
0x2446,
0x2447,
0x2448,
0x2449,
0x244a,
0x244b,
0x244c,
0x244d,
0x244e,
0x244f,
0x2450,
0x2451,
0x2452,
0x2453,
0x2454,
0x2455,
0x2456,
0x2457,
0x2458,
0x2459,
0x245a,
0x245b,
0x245c,
0x245d,
0x245e,
0x245f,
0x2460,
0x2461,
0x2462,
0x2463,
0x2464,
0x2465,
0x2466,
0x2467,
0x2468,
0x2469,
0x246a,
0x246b,
0x246c,
0x246d,
0x246e,
0x246f,
0x2470,
0x2471,
0x2472,
0x2473,
0x2474,
0x2475,
0x2476,
0x2477,
0x2478,
0x2479,
0x247a,
0x247b,
0x247c,
0x247d,
0x247e,
0x247f,
0x2480,
0x2481,
0x2482,
0x2483,
0x2484,
0x2485,
0x2486,
0x2487,
0x2488,
0x2489,
0x248a,
0x248b,
0x248c,
0x248d,
0x248e,
0x248f,
0x2490,
0x2491,
0x2492,
0x2493,
0x2494,
0x2495,
0x2496,
0x2497,
0x2498,
0x2499,
0x249a,
0x249b,
0x249c,
0x249d,
0x249e,
0x249f,
0x24a0,
0x24a1,
0x24a2,
0x24a3,
0x24a4,
0x24a5,
0x24a6,
0x24a7,
0x24a8,
0x24a9,
0x24aa,
0x24ab,
0x24ac,
0x24ad,
0x24ae,
0x24af,
0x24b0,
0x24b1,
0x24b2,
0x24b3,
0x24b4,
0x24b5,
0x24b6,
0x24b7,
0x24b8,
0x24b9,
0x24ba,
0x24bb,
0x24bc,
0x24bd,
0x24be,
0x24bf,
0x24c0,
0x24c1,
0x24c2,
0x24c3,
0x24c4,
0x24c5,
0x24c6,
0x24c7,
0x24c8,
0x24c9,
0x24ca,
0x24cb,
0x24cc,
0x24cd,
0x24ce,
0x24cf,
0x24d0,
0x24d1,
0x24d2,
0x24d3,
0x24d4,
0x24d5,
0x24d6,
0x24d7,
0x24d8,
0x24d9,
0x24da,
0x24db,
0x24dc,
0x24dd,
0x24de,
0x24df,
0x24e0,
0x24e1,
0x24e2,
0x24e3,
0x24e4,
0x24e5,
0x24e6,
0x24e7,
0x24e8,
0x24e9,
0x24ea,
0x24eb,
0x24ec,
0x24ed,
0x24ee,
0x24ef,
0x24f0,
0x24f1,
0x24f2,
0x24f3,
0x24f4,
0x24f5,
0x24f6,
0x24f7,
0x24f8,
0x24f9,
0x24fa,
0x24fb,
0x24fc,
0x24fd,
0x24fe,
0x24ff,
0x2500,
0x2501,
0x2502,
0x2503,
0x2504,
0x2505,
0x2506,
0x2507,
0x2508,
0x2509,
0x250a,
0x250b,
0x250c,
0x250d,
0x250e,
0x250f,
0x2510,
0x2511,
0x2512,
0x2513,
0x2514,
0x2515,
0x2516,
0x2517,
0x2518,
0x2519,
0x251a,
0x251b,
0x251c,
0x251d,
0x251e,
0x251f,
0x2520,
0x2521,
0x2522,
0x2523,
0x2524,
0x2525,
0x2526,
0x2527,
0x2528,
0x2529,
0x252a,
0x252b,
0x252c,
0x252d,
0x252e,
0x252f,
0x2530,
0x2531,
0x2532,
0x2533,
0x2534,
0x2535,
0x2536,
0x2537,
0x2538,
0x2539,
0x253a,
0x253b,
0x253c,
0x253d,
0x253e,
0x253f,
0x2540,
0x2541,
0x2542,
0x2543,
0x2544,
0x2545,
0x2546,
0x2547,
0x2548,
0x2549,
0x254a,
0x254b,
0x254c,
0x254d,
0x254e,
0x254f,
0x2550,
0x2551,
0x2552,
0x2553,
0x2554,
0x2555,
0x2556,
0x2557,
0x2558,
0x2559,
0x255a,
0x255b,
0x255c,
0x255d,
0x255e,
0x255f,
0x2560,
0x2561,
0x2562,
0x2563,
0x2564,
0x2565,
0x2566,
0x2567,
0x2568,
0x2569,
0x256a,
0x256b,
0x256c,
0x256d,
0x256e,
0x256f,
0x2570,
0x2571,
0x2572,
0x2573,
0x2574,
0x2575,
0x2576,
0x2577,
0x2578,
0x2579,
0x257a,
0x257b,
0x257c,
0x257d,
0x257e,
0x257f,
0x2580,
0x2581,
0x2582,
0x2583,
0x2584,
0x2585,
0x2586,
0x2587,
0x2588,
0x2589,
0x258a,
0x258b,
0x258c,
0x258d,
0x258e,
0x258f,
0x2590,
0x2591,
0x2592,
0x2593,
0x2594,
0x2595,
0x2596,
0x2597,
0x2598,
0x2599,
0x259a,
0x259b,
0x259c,
0x259d,
0x259e,
0x259f,
0x25a0,
0x25a1,
0x25a2,
0x25a3,
0x25a4,
0x25a5,
0x25a6,
0x25a7,
0x25a8,
0x25a9,
0x25aa,
0x25ab,
0x25ac,
0x25ad,
0x25ae,
0x25af,
0x25b0,
0x25b1,
0x25b2,
0x25b3,
0x25b4,
0x25b5,
0x25b6,
0x25b7,
0x25b8,
0x25b9,
0x25ba,
0x25bb,
0x25bc,
0x25bd,
0x25be,
0x25bf,
0x25c0,
0x25c1,
0x25c2,
0x25c3,
0x25c4,
0x25c5,
0x25c6,
0x25c7,
0x25c8,
0x25c9,
0x25ca,
0x25cb,
0x25cc,
0x25cd,
0x25ce,
0x25cf,
0x25d0,
0x25d1,
0x25d2,
0x25d3,
0x25d4,
0x25d5,
0x25d6,
0x25d7,
0x25d8,
0x25d9,
0x25da,
0x25db,
0x25dc,
0x25dd,
0x25de,
0x25df,
0x25e0,
0x25e1,
0x25e2,
0x25e3,
0x25e4,
0x25e5,
0x25e6,
0x25e7,
0x25e8,
0x25e9,
0x25ea,
0x25eb,
0x25ec,
0x25ed,
0x25ee,
0x25ef,
0x25f0,
0x25f1,
0x25f2,
0x25f3,
0x25f4,
0x25f5,
0x25f6,
0x25f7,
0x25f8,
0x25f9,
0x25fa,
0x25fb,
0x25fc,
0x25fd,
0x25fe,
0x25ff,
0x2600,
0x2601,
0x2602,
0x2603,
0x2604,
0x2605,
0x2606,
0x2607,
0x2608,
0x2609,
0x260a,
0x260b,
0x260c,
0x260d,
0x260e,
0x260f,
0x2610,
0x2611,
0x2612,
0x2613,
0x2614,
0x2615,
0x2616,
0x2617,
0x2618,
0x2619,
0x261a,
0x261b,
0x261c,
0x261d,
0x261e,
0x261f,
0x2620,
0x2621,
0x2622,
0x2623,
0x2624,
0x2625,
0x2626,
0x2627,
0x2628,
0x2629,
0x262a,
0x262b,
0x262c,
0x262d,
0x262e,
0x262f,
0x2630,
0x2631,
0x2632,
0x2633,
0x2634,
0x2635,
0x2636,
0x2637,
0x2638,
0x2639,
0x263a,
0x263b,
0x263c,
0x263d,
0x263e,
0x263f,
0x2640,
0x2641,
0x2642,
0x2643,
0x2644,
0x2645,
0x2646,
0x2647,
0x2648,
0x2649,
0x264a,
0x264b,
0x264c,
0x264d,
0x264e,
0x264f,
0x2650,
0x2651,
0x2652,
0x2653,
0x2654,
0x2655,
0x2656,
0x2657,
0x2658,
0x2659,
0x265a,
0x265b,
0x265c,
0x265d,
0x265e,
0x265f,
0x2660,
0x2661,
0x2662,
0x2663,
0x2664,
0x2665,
0x2666,
0x2667,
0x2668,
0x2669,
0x266a,
0x266b,
0x266c,
0x266d,
0x266e,
0x266f,
0x2670,
0x2671,
0x2672,
0x2673,
0x2674,
0x2675,
0x2676,
0x2677,
0x2678,
0x2679,
0x267a,
0x267b,
0x267c,
0x267d,
0x267e,
0x267f,
0x2680,
0x2681,
0x2682,
0x2683,
0x2684,
0x2685,
0x2686,
0x2687,
0x2688,
0x2689,
0x268a,
0x268b,
0x268c,
0x268d,
0x268e,
0x268f,
0x2690,
0x2691,
0x2692,
0x2693,
0x2694,
0x2695,
0x2696,
0x2697,
0x2698,
0x2699,
0x269a,
0x269b,
0x269c,
0x269d,
0x269e,
0x269f,
0x26a0,
0x26a1,
0x26a2,
0x26a3,
0x26a4,
0x26a5,
0x26a6,
0x26a7,
0x26a8,
0x26a9,
0x26aa,
0x26ab,
0x26ac,
0x26ad,
0x26ae,
0x26af,
0x26b0,
0x26b1,
0x26b2,
0x26b3,
0x26b4,
0x26b5,
0x26b6,
0x26b7,
0x26b8,
0x26b9,
0x26ba,
0x26bb,
0x26bc,
0x26bd,
0x26be,
0x26bf,
0x26c0,
0x26c1,
0x26c2,
0x26c3,
0x26c4,
0x26c5,
0x26c6,
0x26c7,
0x26c8,
0x26c9,
0x26ca,
0x26cb,
0x26cc,
0x26cd,
0x26ce,
0x26cf,
0x26d0,
0x26d1,
0x26d2,
0x26d3,
0x26d4,
0x26d5,
0x26d6,
0x26d7,
0x26d8,
0x26d9,
0x26da,
0x26db,
0x26dc,
0x26dd,
0x26de,
0x26df,
0x26e0,
0x26e1,
0x26e2,
0x26e3,
0x26e4,
0x26e5,
0x26e6,
0x26e7,
0x26e8,
0x26e9,
0x26ea,
0x26eb,
0x26ec,
0x26ed,
0x26ee,
0x26ef,
0x26f0,
0x26f1,
0x26f2,
0x26f3,
0x26f4,
0x26f5,
0x26f6,
0x26f7,
0x26f8,
0x26f9,
0x26fa,
0x26fb,
0x26fc,
0x26fd,
0x26fe,
0x26ff,
0x2700,
0x2701,
0x2702,
0x2703,
0x2704,
0x2705,
0x2706,
0x2707,
0x2708,
0x2709,
0x270a,
0x270b,
0x270c,
0x270d,
0x270e,
0x270f,
0x2710,
0x2711,
0x2712,
0x2713,
0x2714,
0x2715,
0x2716,
0x2717,
0x2718,
0x2719,
0x271a,
0x271b,
0x271c,
0x271d,
0x271e,
0x271f,
0x2720,
0x2721,
0x2722,
0x2723,
0x2724,
0x2725,
0x2726,
0x2727,
0x2728,
0x2729,
0x272a,
0x272b,
0x272c,
0x272d,
0x272e,
0x272f,
0x2730,
0x2731,
0x2732,
0x2733,
0x2734,
0x2735,
0x2736,
0x2737,
0x2738,
0x2739,
0x273a,
0x273b,
0x273c,
0x273d,
0x273e,
0x273f,
0x2740,
0x2741,
0x2742,
0x2743,
0x2744,
0x2745,
0x2746,
0x2747,
0x2748,
0x2749,
0x274a,
0x274b,
0x274c,
0x274d,
0x274e,
0x274f,
0x2750,
0x2751,
0x2752,
0x2753,
0x2754,
0x2755,
0x2756,
0x2757,
0x2758,
0x2759,
0x275a,
0x275b,
0x275c,
0x275d,
0x275e,
0x275f,
0x2760,
0x2761,
0x2762,
0x2763,
0x2764,
0x2765,
0x2766,
0x2767,
0x2768,
0x2769,
0x276a,
0x276b,
0x276c,
0x276d,
0x276e,
0x276f,
0x2770,
0x2771,
0x2772,
0x2773,
0x2774,
0x2775,
0x2776,
0x2777,
0x2778,
0x2779,
0x277a,
0x277b,
0x277c,
0x277d,
0x277e,
0x277f,
0x2780,
0x2781,
0x2782,
0x2783,
0x2784,
0x2785,
0x2786,
0x2787,
0x2788,
0x2789,
0x278a,
0x278b,
0x278c,
0x278d,
0x278e,
0x278f,
0x2790,
0x2791,
0x2792,
0x2793,
0x2794,
0x2795,
0x2796,
0x2797,
0x2798,
0x2799,
0x279a,
0x279b,
0x279c,
0x279d,
0x279e,
0x279f,
0x27a0,
0x27a1,
0x27a2,
0x27a3,
0x27a4,
0x27a5,
0x27a6,
0x27a7,
0x27a8,
0x27a9,
0x27aa,
0x27ab,
0x27ac,
0x27ad,
0x27ae,
0x27af,
0x27b0,
0x27b1,
0x27b2,
0x27b3,
0x27b4,
0x27b5,
0x27b6,
0x27b7,
0x27b8,
0x27b9,
0x27ba,
0x27bb,
0x27bc,
0x27bd,
0x27be,
0x27bf,
0x27c0,
0x27c1,
0x27c2,
0x27c3,
0x27c4,
0x27c5,
0x27c6,
0x27c7,
0x27c8,
0x27c9,
0x27ca,
0x27cb,
0x27cc,
0x27cd,
0x27ce,
0x27cf,
0x27d0,
0x27d1,
0x27d2,
0x27d3,
0x27d4,
0x27d5,
0x27d6,
0x27d7,
0x27d8,
0x27d9,
0x27da,
0x27db,
0x27dc,
0x27dd,
0x27de,
0x27df,
0x27e0,
0x27e1,
0x27e2,
0x27e3,
0x27e4,
0x27e5,
0x27e6,
0x27e7,
0x27e8,
0x27e9,
0x27ea,
0x27eb,
0x27ec,
0x27ed,
0x27ee,
0x27ef,
0x27f0,
0x27f1,
0x27f2,
0x27f3,
0x27f4,
0x27f5,
0x27f6,
0x27f7,
0x27f8,
0x27f9,
0x27fa,
0x27fb,
0x27fc,
0x27fd,
0x27fe,
0x27ff,
0x2800,
0x2801,
0x2802,
0x2803,
0x2804,
0x2805,
0x2806,
0x2807,
0x2808,
0x2809,
0x280a,
0x280b,
0x280c,
0x280d,
0x280e,
0x280f,
0x2810,
0x2811,
0x2812,
0x2813,
0x2814,
0x2815,
0x2816,
0x2817,
0x2818,
0x2819,
0x281a,
0x281b,
0x281c,
0x281d,
0x281e,
0x281f,
0x2820,
0x2821,
0x2822,
0x2823,
0x2824,
0x2825,
0x2826,
0x2827,
0x2828,
0x2829,
0x282a,
0x282b,
0x282c,
0x282d,
0x282e,
0x282f,
0x2830,
0x2831,
0x2832,
0x2833,
0x2834,
0x2835,
0x2836,
0x2837,
0x2838,
0x2839,
0x283a,
0x283b,
0x283c,
0x283d,
0x283e,
0x283f,
0x2840,
0x2841,
0x2842,
0x2843,
0x2844,
0x2845,
0x2846,
0x2847,
0x2848,
0x2849,
0x284a,
0x284b,
0x284c,
0x284d,
0x284e,
0x284f,
0x2850,
0x2851,
0x2852,
0x2853,
0x2854,
0x2855,
0x2856,
0x2857,
0x2858,
0x2859,
0x285a,
0x285b,
0x285c,
0x285d,
0x285e,
0x285f,
0x2860,
0x2861,
0x2862,
0x2863,
0x2864,
0x2865,
0x2866,
0x2867,
0x2868,
0x2869,
0x286a,
0x286b,
0x286c,
0x286d,
0x286e,
0x286f,
0x2870,
0x2871,
0x2872,
0x2873,
0x2874,
0x2875,
0x2876,
0x2877,
0x2878,
0x2879,
0x287a,
0x287b,
0x287c,
0x287d,
0x287e,
0x287f,
0x2880,
0x2881,
0x2882,
0x2883,
0x2884,
0x2885,
0x2886,
0x2887,
0x2888,
0x2889,
0x288a,
0x288b,
0x288c,
0x288d,
0x288e,
0x288f,
0x2890,
0x2891,
0x2892,
0x2893,
0x2894,
0x2895,
0x2896,
0x2897,
0x2898,
0x2899,
0x289a,
0x289b,
0x289c,
0x289d,
0x289e,
0x289f,
0x28a0,
0x28a1,
0x28a2,
0x28a3,
0x28a4,
0x28a5,
0x28a6,
0x28a7,
0x28a8,
0x28a9,
0x28aa,
0x28ab,
0x28ac,
0x28ad,
0x28ae,
0x28af,
0x28b0,
0x28b1,
0x28b2,
0x28b3,
0x28b4,
0x28b5,
0x28b6,
0x28b7,
0x28b8,
0x28b9,
0x28ba,
0x28bb,
0x28bc,
0x28bd,
0x28be,
0x28bf,
0x28c0,
0x28c1,
0x28c2,
0x28c3,
0x28c4,
0x28c5,
0x28c6,
0x28c7,
0x28c8,
0x28c9,
0x28ca,
0x28cb,
0x28cc,
0x28cd,
0x28ce,
0x28cf,
0x28d0,
0x28d1,
0x28d2,
0x28d3,
0x28d4,
0x28d5,
0x28d6,
0x28d7,
0x28d8,
0x28d9,
0x28da,
0x28db,
0x28dc,
0x28dd,
0x28de,
0x28df,
0x28e0,
0x28e1,
0x28e2,
0x28e3,
0x28e4,
0x28e5,
0x28e6,
0x28e7,
0x28e8,
0x28e9,
0x28ea,
0x28eb,
0x28ec,
0x28ed,
0x28ee,
0x28ef,
0x28f0,
0x28f1,
0x28f2,
0x28f3,
0x28f4,
0x28f5,
0x28f6,
0x28f7,
0x28f8,
0x28f9,
0x28fa,
0x28fb,
0x28fc,
0x28fd,
0x28fe,
0x28ff,
0x2900,
0x2901,
0x2902,
0x2903,
0x2904,
0x2905,
0x2906,
0x2907,
0x2908,
0x2909,
0x290a,
0x290b,
0x290c,
0x290d,
0x290e,
0x290f,
0x2910,
0x2911,
0x2912,
0x2913,
0x2914,
0x2915,
0x2916,
0x2917,
0x2918,
0x2919,
0x291a,
0x291b,
0x291c,
0x291d,
0x291e,
0x291f,
0x2920,
0x2921,
0x2922,
0x2923,
0x2924,
0x2925,
0x2926,
0x2927,
0x2928,
0x2929,
0x292a,
0x292b,
0x292c,
0x292d,
0x292e,
0x292f,
0x2930,
0x2931,
0x2932,
0x2933,
0x2934,
0x2935,
0x2936,
0x2937,
0x2938,
0x2939,
0x293a,
0x293b,
0x293c,
0x293d,
0x293e,
0x293f,
0x2940,
0x2941,
0x2942,
0x2943,
0x2944,
0x2945,
0x2946,
0x2947,
0x2948,
0x2949,
0x294a,
0x294b,
0x294c,
0x294d,
0x294e,
0x294f,
0x2950,
0x2951,
0x2952,
0x2953,
0x2954,
0x2955,
0x2956,
0x2957,
0x2958,
0x2959,
0x295a,
0x295b,
0x295c,
0x295d,
0x295e,
0x295f,
0x2960,
0x2961,
0x2962,
0x2963,
0x2964,
0x2965,
0x2966,
0x2967,
0x2968,
0x2969,
0x296a,
0x296b,
0x296c,
0x296d,
0x296e,
0x296f,
0x2970,
0x2971,
0x2972,
0x2973,
0x2974,
0x2975,
0x2976,
0x2977,
0x2978,
0x2979,
0x297a,
0x297b,
0x297c,
0x297d,
0x297e,
0x297f,
0x2980,
0x2981,
0x2982,
0x2983,
0x2984,
0x2985,
0x2986,
0x2987,
0x2988,
0x2989,
0x298a,
0x298b,
0x298c,
0x298d,
0x298e,
0x298f,
0x2990,
0x2991,
0x2992,
0x2993,
0x2994,
0x2995,
0x2996,
0x2997,
0x2998,
0x2999,
0x299a,
0x299b,
0x299c,
0x299d,
0x299e,
0x299f,
0x29a0,
0x29a1,
0x29a2,
0x29a3,
0x29a4,
0x29a5,
0x29a6,
0x29a7,
0x29a8,
0x29a9,
0x29aa,
0x29ab,
0x29ac,
0x29ad,
0x29ae,
0x29af,
0x29b0,
0x29b1,
0x29b2,
0x29b3,
0x29b4,
0x29b5,
0x29b6,
0x29b7,
0x29b8,
0x29b9,
0x29ba,
0x29bb,
0x29bc,
0x29bd,
0x29be,
0x29bf,
0x29c0,
0x29c1,
0x29c2,
0x29c3,
0x29c4,
0x29c5,
0x29c6,
0x29c7,
0x29c8,
0x29c9,
0x29ca,
0x29cb,
0x29cc,
0x29cd,
0x29ce,
0x29cf,
0x29d0,
0x29d1,
0x29d2,
0x29d3,
0x29d4,
0x29d5,
0x29d6,
0x29d7,
0x29d8,
0x29d9,
0x29da,
0x29db,
0x29dc,
0x29dd,
0x29de,
0x29df,
0x29e0,
0x29e1,
0x29e2,
0x29e3,
0x29e4,
0x29e5,
0x29e6,
0x29e7,
0x29e8,
0x29e9,
0x29ea,
0x29eb,
0x29ec,
0x29ed,
0x29ee,
0x29ef,
0x29f0,
0x29f1,
0x29f2,
0x29f3,
0x29f4,
0x29f5,
0x29f6,
0x29f7,
0x29f8,
0x29f9,
0x29fa,
0x29fb,
0x29fc,
0x29fd,
0x29fe,
0x29ff,
0x2a00,
0x2a01,
0x2a02,
0x2a03,
0x2a04,
0x2a05,
0x2a06,
0x2a07,
0x2a08,
0x2a09,
0x2a0a,
0x2a0b,
0x2a0c,
0x2a0d,
0x2a0e,
0x2a0f,
0x2a10,
0x2a11,
0x2a12,
0x2a13,
0x2a14,
0x2a15,
0x2a16,
0x2a17,
0x2a18,
0x2a19,
0x2a1a,
0x2a1b,
0x2a1c,
0x2a1d,
0x2a1e,
0x2a1f,
0x2a20,
0x2a21,
0x2a22,
0x2a23,
0x2a24,
0x2a25,
0x2a26,
0x2a27,
0x2a28,
0x2a29,
0x2a2a,
0x2a2b,
0x2a2c,
0x2a2d,
0x2a2e,
0x2a2f,
0x2a30,
0x2a31,
0x2a32,
0x2a33,
0x2a34,
0x2a35,
0x2a36,
0x2a37,
0x2a38,
0x2a39,
0x2a3a,
0x2a3b,
0x2a3c,
0x2a3d,
0x2a3e,
0x2a3f,
0x2a40,
0x2a41,
0x2a42,
0x2a43,
0x2a44,
0x2a45,
0x2a46,
0x2a47,
0x2a48,
0x2a49,
0x2a4a,
0x2a4b,
0x2a4c,
0x2a4d,
0x2a4e,
0x2a4f,
0x2a50,
0x2a51,
0x2a52,
0x2a53,
0x2a54,
0x2a55,
0x2a56,
0x2a57,
0x2a58,
0x2a59,
0x2a5a,
0x2a5b,
0x2a5c,
0x2a5d,
0x2a5e,
0x2a5f,
0x2a60,
0x2a61,
0x2a62,
0x2a63,
0x2a64,
0x2a65,
0x2a66,
0x2a67,
0x2a68,
0x2a69,
0x2a6a,
0x2a6b,
0x2a6c,
0x2a6d,
0x2a6e,
0x2a6f,
0x2a70,
0x2a71,
0x2a72,
0x2a73,
0x2a74,
0x2a75,
0x2a76,
0x2a77,
0x2a78,
}
local value = "h C0 03 5F D6"
local type = 4
for _, py in ipairs(offsets) do
setvalue(so + py, type, value)
gg.toast("𝐀𝐍𝐓𝐈 𝐂𝐇𝐄𝐀𝐓 𝐀𝐂𝐓𝐈𝐕𝐀𝐓𝐄")
end

gg.toast("𝐀𝐍𝐓𝐈 𝐂𝐇𝐄𝐀𝐓 𝐀𝐂𝐓𝐈𝐕𝐀𝐓𝐄")
end
function A2()
local so = gg.getRangesList('libanogs.so')[1].start
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber(":cheat", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ -- table(d920f3c)
	[1] = { -- table(c3cf4c5)
		['address'] = 3171953268.0,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 10,
	},
})
gg.searchNumber(":SDKReport", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":strTraceLog", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":GetTraceLog", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":mainTracePath", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":md5", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":MD5", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":kill", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":Cache", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":anti", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":login", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.clearResults()
gg.searchNumber(":terminate", gg.TYPE_WORD, false, gg.SIGN_EQUAL, 0, -1)
gg.getResults(9999)
gg.setValues({ 
	[1] = { 
		['address'] = 3171953268.0,
		['flags'] = 4, 
		['value'] = 10,
	},
})
gg.setValues({ -- table(b1c1716)
	[1] = { -- table(b02b897)
		['address'] = 0x7fff3718dc1c,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(6196323)
	[1] = { -- table(5161020)
		['address'] = 0x7fff3718deac,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(5f6139b)
	[1] = { -- table(8a1c338)
		['address'] = 0x7fff3718e438,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(5bf198b)
	[1] = { -- table(8a86a68)
		['address'] = 0x7fff3718ef78,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(cff3d98)
	[1] = { -- table(901b9f1)
		['address'] = 0x7fff3718f560,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(93cc8)
	[1] = { -- table(f240161)
		['address'] = 0x7fff3718fa18,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(49d2d3)
	[1] = { -- table(fdd3e10)
		['address'] = 0x7fff371904a8,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(582bf28)
	[1] = { -- table(fd9c441)
		['address'] = 0x7fff37190b44,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(6784258)
	[1] = { -- table(d7b3fb1)
		['address'] = 0x7fff37191030,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(a0532a3)
	[1] = { -- table(6b669a0)
		['address'] = 0x7fff371916ac,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(fc3ccb8)
	[1] = { -- table(d0e6a91)
		['address'] = 0x7fff37191dc8,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(63390a6)
	[1] = { -- table(6b5ae7)
		['address'] = 0x7fff37191eac,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 

gg.setValues({ -- table(9d08571)
	[1] = { -- table(cd76f56)
		['address'] = 0x7fff37192140,
		['flags'] = 4, -- gg.TYPE_DWORD
		['value'] = 'h C0 03 5F D6',
	},
}) 
gg.clearResults()
gg.clearResults()
gg.clearList()
gg.clearList()
gg.sleep("2000")
gg.alert("𝐁𝐘𝐏𝐀𝐒𝐒 𝐋𝐎𝐆𝐎 𝐀𝐂𝐓𝐈𝐕𝐀𝐓𝐄")
end

function A3()
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x5c1539c, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x5c1539c + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x2f9d390, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x2f9d390 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x2f9d394, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x2f9d394 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x5c15398, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x5c15398 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x57EBF28, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x57EBF28 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x57E7D90, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x57E7D90 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D600, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D600 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D608, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D608 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D618, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D618 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D620, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D620 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D630, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D630 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D638, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D638 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D640, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D640 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D648, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D648 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D650, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D650 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D660, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D660 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D668, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D668 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D678, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D678 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D680, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D680 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D690, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D690 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D698, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D698 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D6A8, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D6A8 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D6B0, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D6B0 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D6C0, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D6C0 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D6C8, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D6C8 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
local LibStart = gg.getRangesList('liblogic.so')[1].start
local values = {
    { address = LibStart + 0x12D6D8, value = 'h C0 03 5F D6', flags = 4 },
    { address = LibStart + (0x12D6D8 + 0x4), value = 'h C0 03 5F D6', flags = 4 }
}
for _, v in ipairs(values) do
    gg.setValues({ v })
end
gg.toast("𝐁𝐘𝐏𝐀𝐒𝐒 𝐋𝐎𝐁𝐁𝐘 𝐀𝐂𝐓𝐈𝐕𝐀𝐓𝐄")
gg.sleep("2000")
end

function A4()
so = gg.getRangesList('liblogic.so')[1].start
py = 0x4A8BAAC
setvalue(so + py, 32, "h20 00 80 D2 C0 03 5F D6")
so = gg.getRangesList('liblogic.so')[1].start
py = 0x412DDA8
setvalue(so + py, 32, "h20 00 80 D2 C0 03 5F D6")
gg.toast("𝐌𝐀𝐏𝐇𝐀𝐂𝐊 𝐀𝐂𝐓𝐈𝐕𝐀𝐓𝐄")
gg.sleep("2000")
end

function A5()
gg.setRanges(gg.REGION_C_BSS | gg.REGION_ANONYMOUS)
gg.searchNumber("1089806008;-1053839852;1089722122", gg.TYPE_DWORD)
gg.searchNumber("1089806008", gg.TYPE_DWORD)
gg.getResults(100)
gg.editAll("1092616192", gg.TYPE_DWORD)
gg.clearResults()
gg.setRanges(gg.REGION_C_BSS | gg.REGION_ANONYMOUS)
gg.searchNumber("1092616192;-1053839852;1089722122", gg.TYPE_DWORD)
gg.searchNumber("-1053839852", gg.TYPE_DWORD)
gg.getResults(100)
gg.editAll("-1050620723", gg.TYPE_DWORD)
gg.clearResults()
gg.setRanges(gg.REGION_C_BSS | gg.REGION_ANONYMOUS)
gg.searchNumber("1092616192;-1050620723;1089722122", gg.TYPE_DWORD)
gg.searchNumber("1089722122", gg.TYPE_DWORD)
gg.getResults(100)
gg.editAll("1092584735", gg.TYPE_DWORD)
gg.clearResults()
gg.setRanges(gg.REGION_C_BSS | gg.REGION_ANONYMOUS)
gg.searchNumber("-1057677640;-1057761526;1110143140", gg.TYPE_DWORD)
gg.searchNumber("-1057677640", gg.TYPE_DWORD)
gg.getResults(100)
gg.editAll("-1054867456", gg.TYPE_DWORD)
gg.clearResults()
gg.setRanges(gg.REGION_C_BSS | gg.REGION_ANONYMOUS)
gg.searchNumber("-1054867456;-1057761526;1110143140", gg.TYPE_DWORD)
gg.searchNumber("-1057761526", gg.TYPE_DWORD)
gg.getResults(100)
gg.editAll("-1054898913", gg.TYPE_DWORD)
gg.alert("𝐃𝐑𝐎𝐍𝐄 𝐀𝐂𝐓𝐈𝐕𝐀𝐓𝐄")
end

function A6()
il2cpp=gg.getRangesList("liblogic.so")[1].start
setValues(il2cpp + 0x4DC66BC, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x4DC66BC + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x4DC66BC + 0x8, 16, 10000)
setValues(il2cpp + 0x49BFCDC, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x49BFCDC + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x49BFCDC + 0x8, 16, 10000)
setValues(il2cpp + 0x511DF74, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x511DF74 + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x511DF74 + 0x8, 16, 10000)
setValues(il2cpp + 0x37ED63C, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x37ED63C + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x37ED63C + 0x8, 16, 10000)
gg.clearResults()
gg.toast("𝐇𝐈𝐆𝐇 𝐃𝐀𝐌𝐀𝐆𝐄 𝐀𝐂𝐓𝐈𝐕𝐀𝐓𝐄")
gg.sleep("2000")
end
function A7()
il2cpp=gg.getRangesList("liblogic.so")[1].start
setValues(il2cpp + 0x35ab8d0, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x35ab8d0 + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x35ab8d0 + 0x8, 16, 120)
setValues(il2cpp + 0x35abb9c, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x35abb9c + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x35abb9c + 0x8, 16, 120)
setValues(il2cpp + 0x35abee4, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x35abee4 + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x35abee4 + 0x8, 16, 120)
setValues(il2cpp + 0x35ac084, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x35ac084 + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x35ac084 + 0x8, 16, 120)
setValues(il2cpp + 0x35ac264, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x35ac264 + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x35ac264 + 0x8, 16, 120)
setValues(il2cpp + 0x35ac5fc, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x35ac5fc + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x35ac5fc + 0x8, 16, 120)
setValues(il2cpp + 0x35ac6a4, 4, "~A ADDLE	 R0, R0, #32")
setValues(il2cpp + 0x35ac6a4 + 0x4, 4, "~A8 RET")
setValues(il2cpp + 0x35ac6a4 + 0x8, 16, 120)
gg.clearResults()
gg.toast("𝐔𝐏𝐆𝐑𝐀𝐃𝐄 𝐅𝐏𝐒 𝐀𝐂𝐓𝐈𝐕𝐀𝐓𝐄")
end
function EXIT()
running = false
end
function home()
local q = gg.choice({
"𝗕𝗬𝗣𝗔𝗦𝗦 𝗔𝗡𝗧𝗜 𝗖𝗛𝗘𝗔𝗧",
"𝗕𝗬𝗣𝗔𝗦𝗦 𝗟𝗢𝗕𝗕𝗬",
"𝗕𝗬𝗣𝗔𝗦𝗦 𝗟𝗢𝗚𝗢",
"𝗠𝗔𝗣𝗛𝗔𝗖𝗞         𝗜𝗡 𝗚𝗔𝗠𝗘",
"𝗗𝗥𝗢𝗡𝗘 𝗩𝗜𝗘𝗪     𝗜𝗡 𝗚𝗔𝗠𝗘",
"𝗛𝗜𝗚𝗛 𝗗𝗔𝗠𝗔𝗚𝗘   𝗜𝗡 𝗚𝗔𝗠𝗘",
"𝗨𝗣𝗚𝗥𝗔𝗗𝗘 𝗙𝗣𝗦.  𝗜𝗡 𝗚𝗔𝗠𝗘",
"𝗘𝗫𝗜𝗧 𝗜𝗧𝗔𝗖𝗛𝗜 𝗟𝗢𝗔𝗗𝗘𝗥",
}, nil, "𝐈𝐓𝐀𝐂𝐇𝐈 𝐌𝐎𝐃𝐙 𝐌𝐋𝐁𝐁 𝐕𝐈𝐏\n𝐕𝐞𝐫𝐬𝐢𝐨𝐧 = 𝟏.𝟖.𝟗𝟐.𝟗𝟕𝟎𝟐\n𝐏𝐚𝐜𝐤𝐚𝐠𝐞 𝐍𝐚𝐦𝐞 = 𝐌𝐨𝐛𝐢𝐥𝐞 𝐋𝐞𝐠𝐞𝐧𝐝 𝐔𝐧𝐢𝐭𝐲𝐊𝐢𝐥𝐥𝐬𝐌𝐞\n𝐒𝐭𝐚𝐭𝐮𝐬 = 𝐒𝐚𝐟𝐞")
if q == 1 then
A1()
elseif q == 2 then
A2()
elseif q == 3 then
A3()
elseif q == 4 then
A4()
elseif q == 5 then
A5()
elseif q == 6 then
A6()
elseif q == 7 then
A7()
elseif q == 8 then
EXIT()
elseif q == nil then
end
end
while running do
if gg.isVisible(true) then
ITACHI = 1
gg.setVisible(false)
end
if ITACHI == 1 then
home()
ITACHI = -1
end
end
gg.toast("sᴄʀɪᴘᴛ ᴛᴇʀᴍɪɴᴀᴛᴇᴅ") 
